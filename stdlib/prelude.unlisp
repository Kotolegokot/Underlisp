;; (defineq name [value])
(defmacro defineq (name &optional value)
  `(define '~name ~value))

;; (setq name value)
(defmacro setq (name value)
  `(set '~name ~value))

;; (defq? name)
(defmacro defq? (name)
  `(def? '~name))

;; (undefq name)
(defmacro undefq (name)
  `(undef '~name))

;; (setq name lambda-list body)
(defmacro defun (name lambda-list &body body)
  `(defineq ~name (lambda ~lambda-list @body)))

;; (when true-condition body)
(defmacro when (cond &body body)
  `(if ~cond (seq @body)))

;; (unless false-condition body)
(defmacro unless (cond &body body)
  `(when (not ~cond) @body))

;; (cond (condition1 exp1) (condition2 exp2) ...)
(defmacro cond (&body pairs)
  (if (empty? pairs)
      nil
    `(if ~(head (head pairs))
       ~(head (tail (head pairs)))
       (cond @(tail pairs)))))

;; otherwise is used with `cond` macro
(defineq otherwise true)

;; not equal
(defun /= (x y)
  (not (= x y)))

;; type predicates
(defun list? (x)
  (= 'list (type x)))
(defun vector? (x)
  (= 'vector (type x)))
(defun int? (x)
  (= 'int (type x)))
(defun float? (x)
  (= 'float (type x)))
(defun char? (x)
  (= 'char (type x)))
(defun bool? (x)
  (= 'bool (type x)))
(defun symbol? (x)
  (= 'symbol (type x)))
(defun procedure? (x)
  (= 'procedure (type x)))
(defun env? (x)
  (= 'env (type x)))

;; tells if x is a sequence
(defun sequence? (x)
  (or (vector? x)
      (list? x)))

;; tells if x is an int or float
(defun number? (x)
  (or (int? x)
      (float? x)))

;; tells whether x is a string
(defun string? (x)
  (and (list? x)
       (all char? x)))

;; tells whether x is an atom
(defun atom? (x)
  (not (list? x)))

;; tells whether x is nil
(defun nil? (x)
  (= x nil))

;; prints error if condition is false
(defmacro assert (condition)
  `(unless ~condition
     (write '~condition)
     (put-char #newline)
     (error "assert failed")))

;; prints error if (predicate var) is false
(defmacro contract (var predicate)
  `(unless (~predicate ~var)
     (error (format
	     "contract violation~%expected: ~a~%~given: ~a (of type ~a)"
	     '~predicate ~var (type ~var)))))

(defun reverse (xs)
  (contract xs list?)
  (if (empty? xs)
      ()
      (append (reverse (tail xs))
	      (list (head xs)))))

(defun length (xs)
  (contract xs list?)
  (foldl (lambda (acc _) (+ acc 1)) 0 xs))

(defun prepend (x xs)
  (contract xs list?)
  (append (list x) xs))

(defun init (xs)
  (contract xs list?)
  (if (empty? xs)
      (error "init: empty list")
    (if (= 1 (length xs))
	()
	(prepend (head xs) (init (tail xs))))))

(defun last (xs)
  (contract xs list?)
  (if (empty? xs)
      (error "last: empty list")
    (if (= 1 (length xs))
        xs
      (last (tail xs)))))

(defun map (t f xs)
  (contract f procedure?)
  (contract xs sequence?)
  (let ((xs' (->list xs))
	(map' (xs)
	  (if (empty? xs)
	      ()
	      (prepend (f (head xs)) (map' (tail xs))))))
    (->seq t (map' xs'))))

(defun map-list (f xs)
  (contract f procedure?)
  (contract xs list?)
  (if (empty? xs)
      ()
      (prepend (f (head xs))
	       (map-list f (tail xs)))))

;;(defun map-vector (f xs)
;;  (contract f procedure?)
;;  (contract xs vector?)
;;  (let ((map-vector' (lambda (xs i)
;;		       (if (empty? xs)

(defun foldl (f acc xs)
  (contract f procedure?)
  (contract xs list?)
  (if (empty? xs)
      acc
    (foldl f (f acc (head xs))
           (tail xs))))

(defun foldr (f acc xs)
  (contract f procedure?)
  (contract xs list?)
  (if (empty? xs)
      acc
    (foldr f (f (last xs) acc)
           (init xs))))

(defun zip (xs ys)
  (contract xs list?)
  (contract ys list?)
  (if (or (empty? xs) (empty? ys))
      ()
      (prepend (list (head xs) (head ys))
	       (zip (tail xs) (tail ys)))))

(defun zip-with (f xs ys)
  (contract f procedure?)
  (contract xs list?)
  (contract ys list?)
  (if (or (empty? xs) (empty? ys))
      ()
      (prepend (f (head xs) (head ys))
	       (zip-with f (tail xs) (tail ys)))))

(defun elem (y xs)
  (contract xs list?)
  (foldl (lambda (acc x) (or (= x y) acc)) false xs))

(defun filter (p xs)
  (contract p procedure?)
  (contract xs list?)
  (if (empty? xs)
      ()
      (if (p (head xs))
	  (prepend (head xs) (filter p (tail xs)))
	  (filter p (tail xs)))))

(defun all (p xs)
  (contract p procedure?)
  (contract xs list?)
  (foldl (lambda (acc x) (if (p x) acc false)) true xs))

(defun any (p xs)
  (contract p procedure?)
  (contract xs list?)
  (foldl (lambda (acc x) (if (p x) true acc)) false xs))

(defun find (p xs)
  (contract p procedure?)
  (contactt xs list?)
  (if (empty? xs)
      nil
    (if (p (head xs))
        (head xs)
	(find (p (tail xs))))))

(defun take (n xs)
  (contract n int?)
  (contraxt xs list?)
  (cond ((> n (length xs)) (error "take: out of bounds"))
        ((< n 0)           (error "take: negative number"))
        (otherwise
         (if (= n 0)
             ()
	     (prepend (head xs) (take (- n 1) (tail xs)))))))

(defun drop (n xs)
  (contract n int?)
  (contract xs list?)
  (cond ((> n (length xs)) (error "drop: out of bounds"))
        ((< n 0)           (error "drop: negative number"))
        (otherwise
         (if (= n 0)
             xs
           (drop (- n 1) (tail xs))))))

(defun cons (a b)
  (if (list? b)
      (prepend a b)
    (list a b)))

(defmacro case (expr &body pairs)
  (let ((handle-pairs (expr-var pairs)
	  (if (empty? pairs)
	      ()
	      (let ((first (head pairs)))
		(append
		 (list (if (empty? (tail first))
			   `(true ~(head first))
			   `((= ~expr-var ~(head first))
			     (seq @(tail first)))))
		 (handle-pairs expr-var (tail pairs))))))
	(expr-var (gensym)))
    `(let ((~expr-var ~expr))
       (cond @(handle-pairs expr-var pairs)))))

(defmacro let* (pairs &body body)
  (let ((let*' (pairs &body body)
	  (cond ((empty? pairs)
		 `(scope @body))
		((empty? (tail pairs))
		 `(let (~(head pairs))
		    @body))
		(true
		 `(let (~(head pairs))
		    ~(apply let*' (tail pairs) body))))))
    (apply let*' pairs body)))

(defun newline ()
  (put-char #newline))

(defun print-string (str)
  (contract str string?)
  (map 'list put-char str)
  nil)

(defun print-string-ln (str)
  (contract str string?)
  (print-string str)
  (newline))

(defun write (s-expr)
  (print-string (->string s-expr)))

(defun write-ln (s-expr)
  (print-string-ln (->string s-expr)))

(defun format (template &rest args)
  (contract template string?)
  ;; state := none | tilde
  (defun format' (state template args)
    (case state
          ('none (if (empty? template)
                     ()
                   (if (= (head template) #~)
                       (format' 'tilde (tail template) args)
                     (prepend (head template)
                              (format' 'none (tail template) args)))))
          ('tilde (if (empty? template)
                      (error "EOL after ~")
                    (case (head template)
                          (#% (prepend #newline
                                       (format' 'none (tail template) args)))
                          (#~ (prepend #~
                                       (format' 'none (tail template) args)))
                          (#a (append (->string (head args))
                                      (format' 'none (tail template) (tail args))))
                          (#c (if (not (char? (head args)))
                                  (error "char expected")
                                (prepend (head args)
                                         (format' 'none (tail template) (tail args)))))
                          (#s (if (not (list? (head args)))
                                  (error "list expected")
                                (append (head args)
                                        (format' 'none (tail template) (tail args)))))
                          ((prepend (head template)
                                    (format' 'none (tail template) args))))))))
  (format' 'none template args))

(defun print (template &rest args)
  (contract template string?)
  (print-string (apply format template args)))

;; swap a function's args
(defun flip (f)
  (contract f procedure?)
  (lambda (x y) (f y x)))

;; compose two functions
(defun compose (f g)
  (contract f procedure?)
  (contract g procedure?)
  (lambda (x) (f (g x))))

;; the identity
(defun id (x) x)

;; const returns the same value regardless its argument
(defun const (x)
  (lambda (y) x))

;; same as (compose x1 (compose x2 (... xn)))
(defun <<< (&rest fs)
  (if (empty? fs)
      id
    (compose (head fs) (apply <<< (tail fs)))))

;; same as (compose xn (compose x{n - 1} (... x1)))
(defun >>> (&rest fs)
  (if (empty? fs)
      id
    (compose (apply >>> (tail fs)) (head fs))))

;; makes a function that takes a list take any
;; number of arguments
(defun curry (f)
  (contract f procedure?)
  (lambda (&rest rest)
    (f rest)))

;; make a function that takes any number of
;; arguments take a list
(defun uncurry (f)
  (contract f procedure?)
  [apply f])

;; make a one parameter function take a list
;; and modify its head
(defun first (f)
  (contract f procedure?)
  (lambda (list)
    (let ((e1 (nth 0 list))
          (e2 (nth 1 list)))
      (cons (f e1) e2))))

;; make a one parameter function take a list
;; and modify its second element
(defun second (f)
  (contract f procedure?)
  (lambda (list)
    (let ((e1 (nth 0 list))
          (e2 (nth 1 list)))
      (cons e1 (f e2)))))

(defineq pi 3.14159265359)
(defineq e  2.71828182845)

;; cosecant
(defun csc (x)
  (contract x number?)
  (recip  (sin x)))

;; secant
(defun sec (x)
  (contract x number?)
  (recip (cos x)))

;; arccosecant
(defun acsc (x)
  (contract x number?)
  (asin (recip x)))

;; arcsecant
(defun asec (x)
  (contract x number?)
  (acos (recip x)))

;; hyperbolic cosecant
(defun csch (x)
  (contract x number?)
  (recip (sinh x)))

;; hyperbolic secant
(defun sech (x)
  (contract x number?)
  (recip (cosh x)))

;; hyperbolic arccosecant
(defun acsch (x)
  (contract x number?)
  (asinh (recip x)))

;; hyperbolic arcsecant
(defun asech (x)
  (contract x number?)
  (acosh (recip x)))

;; reciprocal fraction
(defun recip (x)
  (contract x number?)
  (/ 1 (float x)))

;; less or equal
(defun <= (x y)
  (or (< x y)
      (= x y)))

;; greater than
(defun > (x y)
  (not (<= x y)))

;; greater or equal
(defun >= (x y)
  (not (< x y)))

;; (compare x) returns 'LT, 'EQ, or 'GT
(defun compare (x y)
  (if (= x y)
      'EQ
    (if (< x y)
      'LT
      'GT)))

(defun neg (x)
  (contract x number?)
  (* -1 x))

(defun zero? (x)
  (contract x number?)
  (= x 0))

(defun neg? (x)
  (contract x number?)
  (< x 0))

(defun pos? (x)
  (contract x number?)
  (> x 0))

(defun atan2 (y x)
  (contract x number?)
  (contract y number?)
  (cond
   ((pos? x)                 (atan (/ y x)))
   ((and (zero? x) (pos? y)) (/ pi 2))
   ((and (neg? x)  (pos? y)) (+ pi (atan (/ y x))))
   ((or
     (and (<= x 0) (neg? y))
     (and (neg? x) (negative-zero? y))
     (and (negative-zero? x) (negative-zero? y)))
    (neg (atan2 (neg y) x)))
   ((and (zero? y)
         (or (neg? x)
             (negative-zero? x)))
    pi)
   ((and (zero? x) (zero? y)) y)
   (otherwise (+ x y))))

(defun tan (x)
  (contract x number?)
  (/ (sin x) (cos x)))

(defun cot (x)
  (contract x number?)
  (/ (cos x) (sin x)))

(defun tanh (x)
  (contract x number?)
  (/ (sinh x) (cosh x)))

(defun coth (x)
  (contract x number?)
  (/ (cosh x) (sinh x)))

(defun sqrt (x)
  (contract x number?)
  (^ x 0.5))

(defun log (x y)
  (contract x number?)
  (/ (ln x) (ln y)))

(defun quot (x y)
  (contract x int?)
  (head (quot-rem x y)))

(defun rem (x y)
  (contract x int?)
  (head (tail (quot-rem x y))))

(defun div (x y)
  (contract x int?)
  (contract y int?)
  (head (div-mod x y)))

(defun mod (x y)
  (contract x int?)
  (contract y int?)
  (head (tail (div-mod x y))))

(defun sign (x)
  (contract x number?)
  (case (compare x 0)
	('EQ 0)
	('LT -1)
	('GT 1)))

(defineq succ [+ 1])
(defineq pred [(flip -) 1])

(defun abs (x)
  (contract x number?)
  (if (= (sign x) -1)
      (neg x)
    x))

(defun in-range (a b x)
  (contract x number?)
  (and (<= a x) (<= x b)))

(defun ->list (seq)
  (contract seq sequence?)
  (concat 'list seq))

(defun ->vector (seq)
  (contract seq sequence?)
  (concat 'vector seq))

(defun ->seq (t seq)
  (contract seq sequence?)
  (concat t seq))
